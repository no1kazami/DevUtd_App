<?xml version="1.0" encoding="utf-8"?>
<!-- 
    Mobile Utils Plugin
    Created by Patryk Stepniewski
    Copyright (c) 2014-2019 gameDNA Ltd. All Rights Reserved.
-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <init>
	<log text="MobileUtils init"/>
  </init>

  <proguardAdditions>
	<insert>
	</insert>
  </proguardAdditions>

  <resourceCopies>
	<copyDir src="$S(PluginDir)/../../ThirdPartyLibraries/Android"
					dst="$S(BuildDir)" />
  </resourceCopies>
	
  <gameActivityImportAdditions>
	<insert>
    import android.net.ConnectivityManager;
    import android.net.NetworkInfo;
    import com.google.android.gms.common.ConnectionResult;
    import android.telephony.TelephonyManager;
    import android.provider.Settings.Secure;
    import android.net.wifi.WifiManager;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import android.content.pm.ActivityInfo;
    import android.net.Uri;
  </insert>
  </gameActivityImportAdditions>

  <androidManifestUpdates>
	  <addPermission android:name="android.permission.READ_PHONE_STATE" />
  </androidManifestUpdates>

  <gameActivityClassAdditions>
	<insert>
	public boolean AndroidThunkJava_CheckInternetConnection() 
	{
		ConnectivityManager connectivity = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		if (connectivity != null)
		{
			NetworkInfo[] info = connectivity.getAllNetworkInfo();
			if (info != null)
			{
				for (int i = 0; i &lt; info.length; i++)
				{
					if (info[i].getState() == NetworkInfo.State.CONNECTED)
					{
						return true;
					}
				}
			}
		}
		return false;
	}

	public boolean AndroidThunkJava_CheckGooglePlayServices() 
	{
		int status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getBaseContext());
		if(status == ConnectionResult.SUCCESS) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	public String AndroidThunkJava_GetPersistentUniqueDeviceId() 
	{
		TelephonyManager TelephonyMgr = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
		String IMEI = TelephonyMgr.getDeviceId(); 
		
		String FakeDeviceID = "35" + 
								Build.BOARD.length() % 10+ Build.BRAND.length() % 10 + 
        						Build.CPU_ABI.length() % 10 + Build.DEVICE.length() % 10 + 
        						Build.DISPLAY.length() % 10 + Build.HOST.length() % 10 + 
        						Build.ID.length() % 10 + Build.MANUFACTURER.length() % 10 + 
        						Build.MODEL.length() % 10 + Build.PRODUCT.length() % 10 + 
        						Build.TAGS.length() % 10 + Build.TYPE.length() % 10 + 
        						Build.USER.length() % 10 ; 
 
		String AndroidID = Secure.getString(getContentResolver(), Secure.ANDROID_ID); 

		WifiManager wm = (WifiManager)getSystemService(Context.WIFI_SERVICE);	  
		String MACAddress = wm.getConnectionInfo().getMacAddress();
	
		String LongDeviceID = IMEI + FakeDeviceID + AndroidID + MACAddress;

		MessageDigest m = null;
		try 
		{
			m = MessageDigest.getInstance("MD5");
		} 
		catch (NoSuchAlgorithmException e) 
		{
			e.printStackTrace();
		} 
		m.update(LongDeviceID.getBytes(), 0, LongDeviceID.length());
		byte MD5Data[] = m.digest();

		String UniqueID = new String();
		for (int i = 0; i &lt; MD5Data.length; i++) 
		{
			int b =  (0xFF &amp; MD5Data[i]);
			if (b &lt;= 0xF) 
			{
			  UniqueID += "0";
			}
			UniqueID += Integer.toHexString(b); 
		}

		UniqueID = UniqueID.toUpperCase();
		
		return UniqueID;
	}
	
	public String AndroidThunkJava_GetDeviceId() 
	{	
		String FakeDeviceID = "35" + 
								Build.BOARD.length() % 10+ Build.BRAND.length() % 10 + 
        						Build.CPU_ABI.length() % 10 + Build.DEVICE.length() % 10 + 
        						Build.DISPLAY.length() % 10 + Build.HOST.length() % 10 + 
        						Build.ID.length() % 10 + Build.MANUFACTURER.length() % 10 + 
        						Build.MODEL.length() % 10 + Build.PRODUCT.length() % 10 + 
        						Build.TAGS.length() % 10 + Build.TYPE.length() % 10 + 
        						Build.USER.length() % 10 ; 
 
		String AndroidID = Secure.getString(getContentResolver(), Secure.ANDROID_ID); 

		WifiManager wm = (WifiManager)getSystemService(Context.WIFI_SERVICE);	  
		String MACAddress = wm.getConnectionInfo().getMacAddress();
	
		String LongDeviceID = FakeDeviceID + AndroidID + MACAddress;

		MessageDigest m = null;
		try 
		{
			m = MessageDigest.getInstance("MD5");
		} 
		catch (NoSuchAlgorithmException e) 
		{
			e.printStackTrace();
		} 
		m.update(LongDeviceID.getBytes(), 0, LongDeviceID.length());
		byte MD5Data[] = m.digest();

		String UniqueID = new String();
		for (int i = 0; i &lt; MD5Data.length; i++) 
		{
			int b =  (0xFF &amp; MD5Data[i]);
			if (b &lt;= 0xF)
    {
    UniqueID += "0";
    }
    UniqueID += Integer.toHexString(b);
    }

    UniqueID = UniqueID.toUpperCase();

    return UniqueID;
  }
  
  public boolean AndroidThunkJava_ToggleOrientation()
  {
    boolean result=false;
    int orientation=getResources().getConfiguration().orientation;
    if(orientation==Configuration.ORIENTATION_PORTRAIT)
    {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
    result=true;
    }
    else if(orientation==Configuration.ORIENTATION_LANDSCAPE)
    {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
    result=false;
    }
    return result;
  }
    
  public boolean AndroidThunkJava_SendEmail()
  {
		Intent emailSelectorIntent = new Intent( Intent.ACTION_SENDTO );
		emailSelectorIntent.setData( Uri.parse( "mailto:" ) );
    
    Intent email = new Intent(Intent.ACTION_SEND);
    String[] address = {"printfgames.help@gmail.com"};
    email.putExtra(Intent.EXTRA_EMAIL, address);
    email.putExtra(Intent.EXTRA_SUBJECT,"DevUtd 공식 앱 사용자 문의");
    email.putExtra(Intent.EXTRA_TEXT,"잘못된 정보나 피드백을 주시면 가능한 빠르게 처리해 드리겠습니다.\n");
    email.addFlags( Intent.FLAG_GRANT_READ_URI_PERMISSION );
		email.addFlags( Intent.FLAG_GRANT_WRITE_URI_PERMISSION );
		email.setSelector( emailSelectorIntent );
    startActivity(email);

    return true;
  }
  
  public boolean AndroidThunkJava_ShareApp()
  {
		Intent msg = new Intent(Intent.ACTION_SEND);
    msg.addCategory(Intent.CATEGORY_DEFAULT);
    msg.putExtra(Intent.EXTRA_TEXT, "https://play.google.com/store/apps/details?id=com.YourCompany.SpoNoNo");
    msg.putExtra(Intent.EXTRA_TITLE, "DevUtd 공식 앱 공유하기");
    msg.setType("text/plain");
    startActivity(Intent.createChooser(msg, "앱을 선택해 주세요"));

    return true;
  }
  
  public boolean AndroidThunkJava_NewSendEmail( String emailAddress)
  {
    Intent emailSelectorIntent = new Intent( Intent.ACTION_SENDTO );
    emailSelectorIntent.setData( Uri.parse( "mailto:" ) );
    
    Intent email = new Intent(Intent.ACTION_SEND);
    String[] address = { emailAddress };
    email.putExtra(Intent.EXTRA_EMAIL, address);
    email.putExtra(Intent.EXTRA_SUBJECT,"DevUtd 공식 앱 사용자 문의");
    email.putExtra(Intent.EXTRA_TEXT,"잘못된 정보나 피드백을 주시면 가능한 빠르게 처리해 드리겠습니다.\n");
    email.addFlags( Intent.FLAG_GRANT_READ_URI_PERMISSION );
    email.addFlags( Intent.FLAG_GRANT_WRITE_URI_PERMISSION );
    email.setSelector( emailSelectorIntent );
    startActivity(email);

    return true;
  }
  
  public boolean AndroidThunkJava_NewShareApp(String shareAddress)
  {
    Intent msg = new Intent(Intent.ACTION_SEND);
    msg.addCategory(Intent.CATEGORY_DEFAULT);
    msg.putExtra(Intent.EXTRA_TEXT, shareAddress);
    msg.putExtra(Intent.EXTRA_TITLE, "DevUtd 공식 앱 공유하기");
    msg.setType("text/plain");
    startActivity(Intent.createChooser(msg, "앱을 선택해 주세요"));

    return true;
  }
  </insert>
  </gameActivityClassAdditions>
</root>
